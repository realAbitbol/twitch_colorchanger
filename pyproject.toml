# Build system configuration
[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

# Core project metadata (was missing; added to avoid UNKNOWN package name)
[project]
name = "twitch_colorchanger"
version = "1.0.0"
description = "Twitch ColorChanger bot"
readme = "README.md"
requires-python = ">=3.13"
license = { file = "LICENSE" }
keywords = ["twitch", "bot", "color"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GPLv3 License",
    "Operating System :: OS Independent",
]
dependencies = [
    "aiohttp>=3.12.0,<4.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "colorlog>=6.0.0,<7.0.0",
    "tenacity>=9.0.0,<10.0.0"
]

[project.scripts]

# Optional: development dependency group (empty placeholder for future)
[project.optional-dependencies]
dev = [
    # Code quality tools (modern Ruff-based stack)
    "ruff>=0.1.0,<1.0.0",     # Fast Python linter and formatter (replaces black, isort, flake8)
    "mypy>=1.5.0,<2.0.0",     # Type checking

    # Markdown formatting and linting
    "mdformat>=0.7.0,<1.0.0",         # Markdown formatter (like Black for Markdown)
    "mdformat-gfm>=0.3.0,<1.0.0",     # GitHub Flavored Markdown support
    "mdformat-tables>=0.4.0,<1.0.0",  # Table formatting support

    # Security scanning
    "bandit>=1.7.0,<2.0.0",

    # Dead code detection
    "vulture>=2.6,<3.0.0",

    # Documentation
    "sphinx>=7.1.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",

    # Development utilities
    "pre-commit>=3.3.0,<4.0.0",

    # Testing
    "pytest>=7.0.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "pytest-timeout>=2.0.0,<3.0.0",

    # Performance profiling
    "py-spy>=0.3.0,<1.0.0"
]

# MyPy type checking
[tool.mypy]
python_version = "3.13"

# Relaxed (baseline) settings â€“ we previously enabled very strict mode which produced
# an overwhelming volume of errors. This configuration dials things back so we can
# iteratively tighten specific modules later.

ignore_missing_imports = true        # Suppress 3rd party stub noise for now
warn_unused_configs = true
warn_redundant_casts = true
warn_return_any = false              # Allow incremental typing
warn_no_return = true
strict_equality = true
show_error_codes = true
pretty = true

disallow_untyped_defs = false
check_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
disallow_any_expr = false
disallow_any_unimported = false
disallow_any_generics = false
disallow_subclassing_any = false
no_implicit_reexport = false
follow_imports = "skip"
exclude = [
    "tests/",
]

# Bandit security linting
[tool.bandit]
skips = ["B101"]  # Skip assert_used test

# Flake8 would go in setup.cfg or .flake8, but we'll use pyproject.toml compatible tools

# Ruff - Modern Python linter and formatter
[tool.ruff]
target-version = "py313"
line-length = 88

# Enable specific rule sets
lint.select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort (import sorting)
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "UP",     # pyupgrade
    "S",      # security
    "PERF",   # performance
    "ASYNC",  # async best practices
]

# Ignore specific rules that are too strict for this project
lint.ignore = [
    "E501",   # Line too long (handled by formatter)
    "E203",   # Whitespace before ':' (formatter handles this)
    "SIM105", # Use contextlib.suppress (preference - explicit is clearer)
    "SIM108", # Use ternary operator (preference - if/else can be clearer)
    "SIM103", # Return condition directly (preference - explicit return is clearer)
    "UP007",  # Use PEP 585 generic syntax (reverted for mypy compatibility)
]

# Exclude patterns
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    ".pytest_cache",
    "htmlcov",
    "build",
    "dist",
    "*.egg-info",
    "tests",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"main.py" = ["T201"]
"tests/*" = ["S101", "S105", "S106"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["src"]
known-third-party = ["aiohttp"]

# Markdown formatting
[tool.mdformat]
wrap = "keep"           # Preserve existing line wrapping
end_of_line = "lf"      # Use Unix line endings
number = false          # Don't renumber ordered lists

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--timeout=10",
]
asyncio_mode = "auto"
