{
  "app": {
    "cancelled": "🛑 Application cancelled",
    "context_shutdown_begin": "🔻 App initiating context shutdown",
    "context_shutdown_complete": "✅ App completed context shutdown",
    "atexit_context_check_error": "⚠️ Atexit context check error: {error}",
    "critical_error": "💥 Critical error occurred: {error}",
    "health_fail": "❌ Health check failed: {error}",
    "health_mode": "🩺 Health check mode",
    "health_pass": "✅ Health check passed users={user_count}",
    "interrupted": "✋ Interrupted by user",
    "shutdown_complete": "✅ Application shutdown complete",
    "start": "🚀 Starting Twitch Color Changer Bot",
    "terminated_by_cancellation": "🛑 Application terminated by cancellation signal",
    "terminated_by_user": "👋 Application terminated by user",
    "top_level_error": "💥 Top-level critical error: {error}"
  },
  "bot": {
    "auto_color_disabled": "🚫 Automatic color change disabled user={user}",
    "auto_color_enabled": "✅ Automatic color change enabled user={user}",
    "closing_for_user": "🔻 Closing bot user={user}",
  "auth_failure_callback_set_error": "⚠️ Failed setting auth failure callback user={user}: {error}",
  "chat_not_initialized": "⚠️ Chat backend not initialized user={user}",
  "join_channel_error": "💥 Error joining channel {channel} user={user}: {error}",
  "token_scopes": "🧪 Token scopes user={user} scopes={scopes}",
  "using_chat_backend": "🔀 Using chat backend {backend} user={user}",
    "color_change_attempt_refresh": "🔐 Attempting token refresh after 401 color change user={user}",
    "color_change_internal_error": "💥 Internal error changing color (non-HTTP) user={user}",
    "color_change_http_error_detail": "🧪 HTTP error detail status={status_code} detail={detail} user={user}",
    "color_change_status_failed": "❌ Failed to change color status={status_code} user={user}",
    "color_change_timeout": "⏱️ Color change timeout user={user}",
    "color_success_late_classification": "⚠️ Late success classification status={status_code} user={user}",
    "color_changed": "🎨 Color changed to {color} user={user}",
    "preset_color_changed": "🎨 Preset color changed to {color} user={user}",
    "preset_color_internal_error": "💥 Internal error changing preset color user={user}",
    "preset_color_http_error_detail": "🧪 Preset color HTTP error detail status={status_code} detail={detail} user={user}",
    "preset_color_success_late_classification": "⚠️ Late preset color success classification status={status_code} user={user}",
    "color_refresh_failed": "💥 Token refresh failed cannot retry color change user={user}",
    "color_retry_after_refresh": "🔄 Retrying color change after token refresh user={user}",
  "preset_color_401": "🔐 Attempting token refresh after 401 preset color change user={user}",
  "preset_color_retry": "🔄 Retrying preset color change after token refresh user={user}",
  "preset_color_refresh_failed": "💥 Token refresh failed cannot retry preset color change user={user}",
    "config_file_not_found": "📁 Config file not found path={path} user={user}",
    "config_permission_denied": "🔒 Permission denied writing config user={user}",
    "connect_failed": "❌ Failed to connect to IRC user={user}",
    "current_color_is": "🎨 Current color is {color} user={user}",
    "disconnect_error": "⚠️ Error disconnecting IRC user={user}: {error}",
    "empty_access_token": "⚠️ Cannot save empty access token user={user}",
    "empty_refresh_token": "⚠️ Cannot save empty refresh token user={user}",
    "error_changing_color_internal": "💥 Error changing color user={user}: {error}",
    "flush_pending_updates_error": "⚠️ Error flushing pending config updates user={user}: {error}",
    "get_current_color_error": "💥 Error getting current color user={user}: {error}",
    "initialized_color": "🎨 Initialized with current color {color} user={user}",
    "irc_auth_refresh_error": "💥 Error refreshing tokens after IRC auth failure user={user}: {error}",
    "irc_auth_refresh_success": "✅ Token refreshed after IRC auth failure user={user}",
    "irc_listener_crash_reconnect_attempt": "🔄 IRC listener crashed - reconnect attempt {attempt} backoff={backoff}s user={user} error={error}",
    "irc_listener_task_error": "� IRC listener task error user={user} type={error_type} error={error}",
    "irc_listener_task_log_fail": "⚠️ Failed logging IRC listener task error user={user}: {error}",
  "irc_not_initialized": "⚠️ IRC not initialized user={user}",
    "listener_start": "�👂 Starting async message listener user={user}",
    "no_config_file_for_persist": "📁 No config file specified cannot persist tokens user={user}",
    "no_current_color_set": "⚠️ No current color set user={user}",
    "no_token_manager": "❌ No token manager available user={user}",
    "normalized_channels": "🛠️ Normalized channels old={old_count} new={new_count} user={user}",
    "normalized_channels_save_failed": "💥 Failed to save normalized channels user={user}: {error}",
    "normalized_channels_saved": "💾 Normalized channels saved user={user}",
    "persist_disable_failed": "⚠️ Failed to persist disable flag user={user}: {error}",
    "persist_enable_failed": "⚠️ Failed to persist enable flag user={user}: {error}",
    "preset_color_error": "💥 Error preset color fallback user={user}: {error}",
    "preset_color_failed_status": "❌ Preset color change failed status={status_code} user={user}",
    "preset_color_retry_failed_status": "💥 Preset color change failed after retries status={status_code} user={user}",
    "rate_limited_color_change": "⏳ Rate limited retry soon user={user}",
    "register_hook_failed": "⚠️ Failed to register token update hook user={user}: {error}",
    "registering_token_manager": "📝 Registering with token manager user={user}",
    "save_failed_final": "💥 Failed to save token changes after attempts={attempts} error={error} user={user}",
    "save_retry": "🔁 Failed to save tokens attempt={attempt} error={error} user={user}",
    "shutdown_initiated": "🔻 Shutting down bot user={user}",
    "start": "▶️ Starting bot user={user}",
    "statistics": "📊 Statistics user={user} messages={messages} colors={colors}",
    "stopping": "🛑 Stopping bot user={user}",
    "token_persist_error": "💥 Token persistence error user={user}: {error}",
    "token_refresh_helper_error": "💥 Error in token refresh helper user={user}: {error}",
    "token_saved": "💾 Token changes saved user={user}",
    "user_id_failed": "❌ Failed to retrieve user_id user={user}",
    "user_id_retrieved": "🆔 Retrieved user_id {user_id} user={user}",
    "user_info_error": "💥 Error getting user info user={user}: {error}",
    "user_info_failed_status": "❌ Failed to get user info status={status_code} user={user}",
  "using_async_irc": "📡 Using async IRC client user={user}",
    "color_handler_attach_error": "⚠️ Failed attaching color handler user={user}: {error}",
    "irc_auth_token_update_error": "⚠️ Error updating IRC auth token user={user}: {error}",
    "token_scope_validation_error": "🚫 Token scope validation error user={user} missing={missing}",
    "token_update_backend_error": "⚠️ Error updating chat backend tokens user={user}: {error}",
    "waiting_irc_task_error": "💥 Error waiting for IRC task user={user}: {error}"
  },
  "config": {
    "channel_normalization_change": "🛠️ Channel normalization change {original}->{normalized}",
    "channel_normalization_save_failed": "💥 Failed saving normalization: {error_type}",
    "channel_normalization_saved": "💾 Channel normalization saved",
    "load_error": "💥 Configuration load error: {error_type}",
    "no_config_file": "📁 No configuration file found",
    "no_config_file_instruction": "📄 Instruction emitted for creating config file",
    "no_valid_users": "⚠️ No valid user configurations found",
    "save_atomic_failed": "💥 Atomic config save failed: {error_type}",
    "save_atomic_success": "💾 Config saved atomically",
    "save_failed": "💥 Config save failed: {error_type}",
    "save_skipped_checksum_match": "⏭️ Skipped save (checksum match) checksum={checksum} users={user_count}",
    "save_verification": "🔍 Verification read user_count={user_count}",
    "summary": "📊 Configuration summary (users={user_count})",
    "summary_user": "👤 User summary {username}",
    "tokens_update_save_failed": "💥 Tokens update save failed: {error_type}",
    "tokens_update_saved": "💾 Tokens update saved",
    "update_user_failed": "💥 Failed to update user in config: {username}",
    "update_user_invalid": "🚫 Rejected invalid user update username={username}",
    "update_user_normalized": "🛠️ User update normalized username={username} channels={channel_count}",
    "valid_users_found": "✅ Valid user configurations found count={user_count}",
    "watcher_pause_failed": "💥 Failed to pause config watcher: {error_type} {error}",
    "watcher_resume_failed": "💥 Failed to resume config watcher: {error_type} {error}",
    "batch_flush": "📤 Config batch flush",
    "backup_created": "🗄️ Config backup created",
    "backup_failed": "💥 Config backup failed: {error}",
    "batch_flush_log_error": "⚠️ Error logging batch flush details: {error}",
    "batch_flush_partial_failures": "⚠️ Batch flush had partial failures count={count}",
    "batch_flush_prune_error": "⚠️ Error pruning user locks: {error}",
    "batch_item_write_error": "⚠️ Error writing batch item user={user}: {error}",
    "user_lock_prune": "🧹 Pruned user locks removed={removed} remaining={remaining}",
    "user_lock_prune_log_error": "⚠️ Error logging user lock prune details: {error}"
  },
  "config_watch": {
    "dir_missing": "📁 Config directory missing path={path}",
    "empty_or_invalid": "⚠️ Config file empty or invalid - ignoring changes",
    "no_valid_users": "⚠️ New config has no valid users - ignoring changes",
    "paused": "⏸️ Config watcher paused (bot update)",
    "processing_error": "💥 Error processing config change: {error}",
    "resumed": "▶️ Config watcher resumed",
    "start": "👀 Started watching config file path={path}",
    "start_failed": "💥 Failed to start config watcher: {error}",
    "stopped": "🛑 Stopped config file watcher",
    "validation_passed": "✅ Config validation passed users={user_count}"
  },
  "context": {
    "creating": "🧪 Creating application context",
    "task_registered": "📝 Context: task registered",
    "rate_limiter_created": "🧱 Rate limiter created",
    "session_close_error": "💥 Error closing HTTP session: {error}",
    "session_created": "🔗 HTTP session created",
    "session_closed_atexit": "🧹 HTTP session closed at exit",
    "session_atexit_error": "⚠️ HTTP session close error at exit: {error}",
    "maintenance_tick": "🕰️ Maintenance tick",
    "maintenance_error": "💥 Maintenance loop error: {error}",
    "session_recycle": "♻️ HTTP session recycled",
    "maintenance_cancel_wait_error": "⚠️ Error waiting maintenance task cancel: {error}",
    "session_close_recycle_error": "⚠️ Error closing HTTP session during recycle: {error}",
    "shutdown": "✅ Application context shutdown complete",
    "shutdown_begin": "🔻 Application context shutdown initiated",
    "shutdown_cancelled": "🛑 Application context shutdown cancelled",
    "shutdown_error": "💥 Error during application context shutdown",
    "start": "🚀 Application context started",
    "token_manager_cancelled": "🛑 Token manager cancellation during shutdown",
    "token_manager_stop_error": "💥 Error stopping token manager: {error}"
  },
  "device_flow": {
    "access_denied": "🚫 User denied device authorization",
    "authorization_required": "🔐 User must authorize application in browser",
    "authorization_success": "✅ User authorized device flow after {polls} polls ({elapsed}s)",
    "code_error": "💥 Failed to obtain device code (status={status})",
    "code_exception": "💥 Exception while requesting device code: {error_type} {error}",
    "code_success": "🔑 Device code retrieved successfully",
    "display_instructions": "📣 Prompt user to visit {verification_uri} and enter code {code}",
    "error": "💥 Device flow error: {error} {description}",
    "expired_token": "⏱️ Device code expired before authorization",
    "poll_error_details": "🧪 Polling error details logged",
    "poll_exception": "💥 Exception polling for tokens: {error_type} {error}",
    "slow_down": "🐢 Server asked to slow down; new interval {new_interval}s",
    "start": "▶️ Starting device flow for user {user}",
    "timeout": "⏱️ Device flow timed out after {expires_in}s",
    "tokens_obtained": "🔑 Access and refresh tokens obtained",
    "unexpected_response": "⚠️ Unexpected device token response: status={status}",
    "unknown_error": "💥 Unknown device flow error: {error}",
    "waiting": "⌛ Waiting for authorization (interval {interval}s)",
    "waiting_authorization": "⌛ Still waiting for user authorization ({polls} polls, {elapsed}s)"
  },
  "error": {
    "logged": "💥 Error: {message} user={user} details={error}"
  },
  "irc": {
    "auth_sent": "🔐 Authentication sent, waiting {wait_seconds}s",
    "connect_join_failed": "⚠️ Connection succeeded but channel join failed",
    "connect_network_error": "💥 Network error during connect: {error}",
    "connect_reset": "⚠️ Connection reset by peer: {error}",
    "connect_start": "🔌 Connecting to IRC server {server}:{port}",
    "connect_success": "✅ Connected and joined channel {channel}",
    "connect_timeout": "⏱️ IRC connection timed out (timeout={timeout})",
    "connection_established": "🔗 IRC TCP connection established",
    "connection_lost": "⚠️ Connection lost",
    "connection_reset": "⚠️ IRC connection reset: {error}",
    "connection_stale": "🛑 Connection stale - terminating",
    "disconnected": "🔌 Disconnected from IRC",
    "dispatch_message_handler": "📤 Dispatching message handler",
    "force_reconnect": "🔄 Force reconnect initiated",
    "join_already_confirmed": "⏭️ Join skipped; already confirmed {channel}",
    "join_attempt": "🎯 Join attempt {attempt} for {channel}",
    "join_begin": "▶️ Beginning join process for {channel}",
    "join_connection_lost": "⚠️ Connection lost during join",
    "join_error": "💥 Error joining channel {channel}: {error_type}",
    "join_max_attempts": "❌ Max join attempts reached for {channel}",
    "join_no_reader": "⚠️ No reader while joining channel",
    "join_processing_error": "💥 Error processing join for {channel}: {error_type}",
    "join_start": "▶️ Joining channel {channel}",
    "join_success": "✅ Joined channel {channel}",
    "join_timeout": "⏱️ Channel join timeout for {channel}",
    "listen_start_failed": "❌ Cannot start listener (not connected)",
    "listener_start": "👂 Listener loop started",
    "listener_stopped": "🛑 Listener loop stopped",
    "message_handler_error": "💥 Message handler error",
    "no_message_handler": "⚠️ No message handler configured",
    "color_handler_error": "💥 Color change command handler error",
    "no_reader": "⚠️ No reader stream available",
    "no_server_activity": "⏳ No server activity for {timeout}s",
    "open_connection": "🔌 Opening IRC connection (timeout={timeout})",
    "ping_timeout": "⏱️ Ping timeout after {time_since_ping:.1f}s",
    "privmsg": "💬 Chat message received (self={self_message})",
    "raw": "📄 Raw IRC message received",
    "reconnect_backoff_wait": "⏳ Waiting {remaining_wait:.1f}s before reconnect (attempt={attempt})",
    "reconnect_failed": "❌ Reconnect failed (attempt={attempt})",
    "reconnect_missing_details": "⚠️ Cannot reconnect: missing credentials",
    "reconnect_success": "✅ Reconnect successful ({extra_channels} extra channels)",
    "reconnect_timeout": "⏱️ Reconnect attempt timed out (timeout={timeout})",
    "stale_early_warning": "⚠️ Early stale warning: {time_since_activity:.1f}s inactivity",
    "state_change": "🔄 IRC state change {old_state} -> {new_state}",
    "token_updated": "🔑 IRC token updated"
  },
  "chat": {
    "color_handler_error": "💥 Color handler error",
    "eventsub_bad_welcome": "⚠️ EventSub bad welcome frame",
    "eventsub_batch_resolve_error": "💥 EventSub batch resolve error: {error}",
    "eventsub_cache_load_error": "⚠️ EventSub cache load error: {error}",
    "eventsub_cache_save_error": "⚠️ EventSub cache save error: {error}",
    "eventsub_channel_lookup_failed": "⚠️ EventSub channel lookup failed channel={channel}",
    "eventsub_connect_error": "💥 EventSub connect error: {error}",
    "eventsub_fetch_user_error": "⚠️ EventSub fetch user error: {error}",
    "eventsub_invalid_json": "⚠️ EventSub invalid JSON payload",
    "eventsub_listen_error": "💥 EventSub listen loop error: {error}",
    "eventsub_missing_client_id": "🚫 EventSub missing client id",
    "eventsub_missing_scopes": "🚫 EventSub missing scopes missing={missing} channel={channel}",
    "eventsub_no_session_id": "🚫 EventSub no session id",
    "eventsub_reconnect_failed": "❌ EventSub reconnect failed attempt={attempt} backoff={backoff}",
    "eventsub_reconnect_success": "✅ EventSub reconnect success attempt={attempt} channels={channel_count}",
    "eventsub_resubscribe_missing": "🔄 EventSub resubscribed missing count={missing} total={total}",
    "eventsub_stale_detected": "⚠️ EventSub stale socket idle={idle}s",
    "eventsub_sub_list_error": "⚠️ EventSub subscription list error: {error}",
    "eventsub_subscribe_error": "💥 EventSub subscribe error channel={channel}",
    "eventsub_subscribe_non_202": "⚠️ EventSub subscribe non-202 status={status} channel={channel}",
    "eventsub_subscribe_unauthorized": "🚫 EventSub subscribe unauthorized channel={channel} count={count}",
    "eventsub_subscribed": "✅ EventSub subscribed channel={channel}",
    "eventsub_subscription_check_error": "⚠️ EventSub subscription check error: {error}",
    "eventsub_token_invalid": "🚫 EventSub token invalid source={source} channel={channel}",
    "eventsub_token_scopes": "🧪 EventSub token scopes scopes={scopes}",
    "eventsub_welcome_parse_error": "⚠️ EventSub welcome parse error: {error}",
    "eventsub_ws_abnormal_end": "⚠️ EventSub WebSocket abnormal end code={code}",
    "eventsub_ws_close_error": "⚠️ EventSub WebSocket close error: {error}",
    "eventsub_ws_closed_detected": "⚠️ EventSub WebSocket closed detected",
    "eventsub_ws_connected": "🔌 EventSub WebSocket connected",
    "irc_color_handler_set_error": "⚠️ IRC color handler set error: {error}",
    "message_handler_error": "💥 Chat message handler error"
  ,"eventsub_log_emit_error": "⚠️ EventSub log emit error: {error}",
  "eventsub_safe_close_error": "⚠️ EventSub safe close error: {error}"
  },
  "manager": {
    "aggregate_statistics": "📊 Aggregate statistics bots={bots} messages={total_messages} colors={total_color_changes}",
    "all_healthy": "✅ All bots healthy",
    "all_started": "✅ All bots started successfully",
    "all_stopped": "🛑 All bots stopped",
    "all_tasks_alive": "🟢 All tasks alive",
    "all_tasks_completed_unexpectedly": "⚠️ All bot tasks completed unexpectedly",
    "bot_close_error": "💥 Error closing bot index={index}: {error}",
    "bot_closed": "🔻 Closed bot index={index} user={user}",
    "bot_create_failed": "💥 Failed to create bot: {error}",
    "bot_created": "🆕 Bot created: {user}",
    "bot_health_stats": "🩺 Bot health stats user={user} since={time_since_activity} connected={connected} running={running}",
    "bot_healthy_before_reconnect": "✅ Bot became healthy before reconnect user={user}",
    "bot_unhealthy": "❌ Bot unhealthy user={user}",
    "bots_running": "🏃 Bots running - press Ctrl+C to stop",
    "cannot_start_listener": "❌ Cannot start listener without IRC instance user={user}",
    "config_change_detected": "🔄 Config change detected - scheduling restart",
    "config_updated": "🛠️ Configuration updated old={old_users} new={new_users}",
    "config_watcher_enabled": "👀 Config watcher enabled file={file}",
    "config_watcher_start_failed": "💥 Config watcher start failed: {error}",
    "config_watching_unavailable": "⚠️ Config watching unavailable - install watchdog",
    "connection_stats_error": "💥 Error getting connection stats for user={user}: {error}",
    "failed_rejoin_channel": "💥 Failed rejoin channel user={user} channel={channel}: {error}",
    "fatal_error": "💥 Fatal error: {error}",
    "goodbye": "👋 Goodbye",
    "health_cancelled": "🛑 Health monitoring cancelled",
    "health_check_running": "⏳ Health check already running - skip",
    "health_error": "💥 Health monitor error: {error}",
    "health_not_confirmed": "❌ Health not confirmed after reconnect user={user}",
    "health_tick": "⏱️ Health check tick",
    "irc_none": "⚠️ IRC connection is None user={user}",
    "irc_reconnect_failed": "❌ IRC reconnection failed user={user}",
    "keyboard_interrupt": "⌨️ Keyboard interrupt",
    "launch_tasks": "🚀 Launching bot tasks (count={tasks})",
    "listener_start_failed": "💥 Listener start failed user={user}: {error}",
    "no_bots": "⚠️ No bots created - aborting start",
    "no_irc_for_force_reconnect": "⚠️ No IRC instance present for reconnect user={user}",
    "no_irc_for_reconnect": "⚠️ No IRC connection to reconnect user={user}",
    "old_listener_cancel_error": "💥 Error cancelling old listener user={user}: {error}",
    "old_listener_cancel_noncritical": "⚠️ Old listener cancellation raised non-critical exception user={user}",
    "possible_auth_issue": "⚠️ Likely authentication or connection issue",
    "precheck_health_error": "💥 Pre-check health error user={user}: {error}",
    "reconnect_error": "💥 Reconnection error user={user}: {error}",
    "reconnect_failed": "❌ Failed to reconnect bot user={user}",
    "reconnected_bot": "✅ Reconnected bot user={user}",
    "reconnecting_unhealthy": "🔄 Reconnecting unhealthy bots (count={count})",
    "removed_dead_tasks": "🧹 Removed dead tasks (count={count})",
    "restart_failed_keep_previous": "⚠️ Restart failed - keeping previous config",
    "restarting": "🔄 Restarting with new configuration",
    "restored_statistics": "♻️ Restored statistics (bots={bots})",
    "saved_statistics": "💾 Saved statistics (bots={bots})",
    "shutdown_initiated": "🔻 Shutdown initiated - stopping bots",
    "signal_shutdown": "🛑 Signal received - initiating shutdown (signal={signal})",
    "start_all": "▶️ Starting all bots (count={count})",
    "started_health_monitor": "▶️ Started health monitor",
    "started_task_watchdog": "▶️ Started task watchdog",
    "stopping_all": "🛑 Stopping all bots",
    "task_cancel_error": "💥 Error cancelling task index={index}: {error}",
    "task_cancelled": "🛑 Cancelled task index={index}",
    "task_completed": "✅ Task completed index={index}",
    "task_exception": "💥 Task index={index} finished with exception: {error}",
    "task_exception_detected": "💥 Task exception index={index}: {error}",
    "task_watchdog_cancelled": "🛑 Task watchdog cancelled",
    "task_watchdog_error": "💥 Task watchdog error: {error}",
    "task_watchdog_tick": "⏱️ Task watchdog tick",
    "token_prune_failed": "⚠️ Error pruning tokens: {error}",
    "wait_tasks_error": "💥 Error waiting for task completion: {error}"
  },
  "rate_limit": {
    "429_headers": "⚠️ Received 429 Too Many Requests (headers captured)",
    "429_reset_known": "⏳ 429 with known reset; waiting {wait_seconds}s",
    "429_reset_unknown": "⚠️ 429 without reset header",
    "backoff_applied": "⏳ Adaptive backoff applied waiting {remaining}s",
    "backoff_increase": "🔼 Adaptive backoff increased to {delay}s (count={count})",
    "backoff_reset": "♻️ Adaptive backoff reset",
    "brief_delay": "⏱️ Brief delay {delay_seconds}s",
    "bucket_stale": "⚠️ Rate limit bucket stale; using fallback delay",
    "bucket_stale_probe": "🧪 Probed stale rate limit bucket key={key} bucket={bucket} age={age}s",
    "headers": "🧾 Rate limit headers received",
    "headers_missing": "⚠️ Rate limit headers missing",
    "no_bucket_min_delay": "⏳ No rate limit bucket yet; using minimal delay",
    "parse_headers_failed": "💥 Failed to parse rate limit headers: {error_type} {error}",
    "update": "📉 Rate limit updated: {remaining}/{limit} remaining (resets in {resets_in}s)",
    "wait_until_reset": "⏳ Waiting until reset (~{wait_seconds}s) due to empty bucket",
    "waiting": "⏳ Delaying request {delay_seconds}s (remaining {remaining})"
  },
  "scheduler": {
    "cancelled_tasks_named": "🛑 Cancelled tasks named {task}",
    "rescheduled_task": "🔄 Rescheduled task name={task} interval={interval}s",
    "scheduled_once": "🗓️ Scheduled one-time task name={task} delay={delay}s",
    "scheduled_recurring": "🗓️ Scheduled recurring task name={task} interval={interval}s",
    "scheduler_cancelled": "🛑 Scheduler cancelled",
    "scheduler_error": "💥 Scheduler error: {error}",
    "started": "▶️ Adaptive scheduler started",
    "stopped": "🛑 Adaptive scheduler stopped",
    "task_cancelled": "🛑 Task {task} cancelled",
    "task_failed": "💥 Task {task} failed: {error}"
  },
  "startup": {
    "instructions_auto_section": "⚙️ Automatic configuration section",
    "instructions_header": "📘 Startup instructions emitted",
    "instructions_how_it_works": "ℹ️ Explaining how the bot works",
    "instructions_manual_section": "📝 Manual configuration section",
    "instructions_point": "👉 Instruction: {text}",
    "instructions_security_notice": "🔒 Security notice about client secrets",
    "instructions_setup_step": "🪜 Setup step {step}: {text}"
  },
  "token": {
    "refresh_error": "💥 Unexpected token refresh error: {error_type}",
    "refresh_invalid_response": "⚠️ Invalid token refresh response missing {missing_field}",
    "refresh_network_error": "💥 Network error during token refresh attempt {attempt}: {error_type}",
    "refresh_rate_limited": "⏳ Token refresh rate limited (status={status})",
    "refresh_success": "✅ Token refresh succeeded on attempt {attempt} (expires_in={expires_in})",
    "refresh_unauthorized": "❌ Token refresh unauthorized (status={status}, {error_type})",
    "valid_but_expiring": "⏳ Token valid but expiring soon - scheduling refresh",
    "validated": "✅ Token validated successfully",
    "validation_error": "💥 Unexpected error during token validation: {error_type}",
    "validation_failed_status": "❌ Token validation failed (status={status})",
    "validation_invalid": "❌ Token validation failed: invalid (status={status})",
    "validation_network_error": "💥 Network error during token validation: {error_type}",
    "validation_rate_limited": "⏳ Token validation rate limited (status={status})",
    "validation_timeout": "⏱️ Token validation timeout",
    "device_authorize_error": "� Device authorization error: {error}",
    "device_authorized": "✅ Device authorized expires_in={expires_in}",
  "device_code_obtained": "� Device code obtained expires_in={expires_in}",
  "scopes_missing_invalidate": "🚫 Token scopes missing required={required} got={current} user={user} invalidated=true"
  },
  "token_manager": {
    "registered": "📝 Token manager: registered",
    "background_cancelled": "� Background token manager task cancelled",
    "start": "▶️ Started centralized token manager",
    "background_error": "� Background token manager loop error: {error}",
    "pruned": "🧹 Pruned tokens removed={removed} remaining={remaining}",
    "removed": "�️ Removed token entry user={user}",
    "stale_background_detected": "🧪 Stale background task detected (cancelling)",
    "stale_background_error": "⚠️ Error cancelling stale background task: {error}",
    "update_hook_error": "⚠️ Update hook scheduling error user={user} type={error_type}",
    "retained_task_error": "⚠️ Retained background task error category={category} error={error} type={error_type}"
  ,"expiry_unknown_forced_refresh_exhausted": "⚠️ Forced refresh attempts exhausted resolving unknown expiry user={user}",
  "expiry_unknown_forced_refresh_failed": "⚠️ Forced refresh attempt failed resolving unknown expiry user={user} attempt={attempt}",
  "expiry_unknown_forced_refresh_success": "✅ Forced refresh resolved unknown expiry user={user} attempt={attempt}",
  "expiry_unknown_validation_failed": "⚠️ Validation failed with unknown expiry user={user}",
  "loop_drift_detected": "⏱️ Token manager loop drift detected drift={drift_seconds}s base={base_sleep}s",
  "remaining_time_detail": "🕒 {message}",
  "unexpected_expired_state": "⚠️ Unexpected expired state detected user={user} remaining={remaining}"
  },
  "metrics": {
    "snapshot": "� Metrics snapshot"
  }
}
