name: Tests and Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write  # Required to commit coverage badge

jobs:
  test:
    name: Python Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV

      - name: Run tests with coverage (fail if below threshold)
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env:
          # GitHub secret configured in repository settings
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: coverage.xml
          flags: unittests
          fail_ci_if_error: true
          verbose: true

      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Generate coverage badge
        if: github.ref == 'refs/heads/main'
        uses: tj-actions/coverage-badge-py@v2
        with:
          output: coverage-badge.svg

      - name: Commit coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          mv coverage-badge.svg .github/coverage.svg
          if git diff --quiet --exit-code .github/coverage.svg; then
            echo "No badge changes"
          else
            git add .github/coverage.svg
            git commit -m "chore: update coverage badge"
            git push
          fi

  lint:
    name: Lint (flake8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Run flake8
        run: flake8 src tests

  typecheck:
    name: Type Check (mypy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Run mypy
        run: mypy src

  security:
    name: Security (bandit & safety)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Run bandit
        run: bandit -q -r src || (echo "Bandit issues found" && exit 1)
      - name: Run safety
        env:
          # GitHub secret configured in repository settings
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
        run: safety scan --detailed-output
