"""Catalog of structured log events with human-readable templates.

Add new (domain, action) pairs here to provide nicer display text.
Template keys correspond to kwargs passed to logger.log_event.
"""

from __future__ import annotations

# (domain, action): template
EVENT_TEMPLATES: dict[tuple[str, str], str] = {
    ("device_flow", "code_success"): "Device code retrieved successfully",
    ("device_flow", "code_error"): "Failed to obtain device code (status={status})",
    (
        "device_flow",
        "code_exception",
    ): "Exception while requesting device code: {error_type} {error}",
    (
        "device_flow",
        "authorization_success",
    ): "User authorized device flow after {polls} polls ({elapsed}s)",
    (
        "device_flow",
        "unexpected_response",
    ): "Unexpected device token response: status={status}",
    (
        "device_flow",
        "poll_exception",
    ): "Exception polling for tokens: {error_type} {error}",
    ("device_flow", "timeout"): "Device flow timed out after {expires_in}s",
    ("device_flow", "poll_error_details"): "Polling error details logged",
    (
        "device_flow",
        "waiting_authorization",
    ): "Still waiting for user authorization ({polls} polls, {elapsed}s)",
    (
        "device_flow",
        "slow_down",
    ): "Server asked to slow down; new interval {new_interval}s",
    ("device_flow", "expired_token"): "Device code expired before authorization",
    ("device_flow", "access_denied"): "User denied device authorization",
    ("device_flow", "error"): "Device flow error: {error} {description}",
    ("device_flow", "unknown_error"): "Unknown device flow error: {error}",
    ("device_flow", "start"): "Starting device flow for user {user}",
    (
        "device_flow",
        "authorization_required",
    ): "User must authorize application in browser",
    (
        "device_flow",
        "display_instructions",
    ): "Prompt user to visit {verification_uri} and enter code {code}",
    ("device_flow", "waiting"): "Waiting for authorization (interval {interval}s)",
    ("device_flow", "tokens_obtained"): "Access and refresh tokens obtained",
    # Rate limit
    (
        "rate_limit",
        "parse_headers_failed",
    ): "Failed to parse rate limit headers: {error_type} {error}",
    ("rate_limit", "headers"): "Rate limit headers received",
    ("rate_limit", "headers_missing"): "Rate limit headers missing",
    (
        "rate_limit",
        "update",
    ): "Rate limit updated: {remaining}/{limit} remaining (resets in {resets_in}s)",
    ("rate_limit", "bucket_stale"): "Rate limit bucket stale; using fallback delay",
    (
        "rate_limit",
        "wait_until_reset",
    ): "Waiting until reset (~{wait_seconds}s) due to empty bucket",
    (
        "rate_limit",
        "no_bucket_min_delay",
    ): "No rate limit bucket yet; using minimal delay",
    (
        "rate_limit",
        "waiting",
    ): "Delaying request {delay_seconds}s (remaining {remaining})",
    ("rate_limit", "brief_delay"): "Brief delay {delay_seconds}s",
    ("rate_limit", "429_headers"): "Received 429 Too Many Requests (headers captured)",
    ("rate_limit", "429_reset_known"): "429 with known reset; waiting {wait_seconds}s",
    ("rate_limit", "429_reset_unknown"): "429 without reset header",
    # Token events
    (
        "token",
        "valid_but_expiring",
    ): "Token valid but expiring soon - scheduling refresh",
    (
        "token",
        "refresh_delayed",
    ): "Refresh delayed due to recent failures (retry_count={retry_count})",
    ("token", "refresh_needed"): "Token refresh initiated",
    (
        "token",
        "refresh_success",
    ): "Token refresh succeeded on attempt {attempt} (expires_in={expires_in})",
    (
        "token",
        "refresh_attempt_error",
    ): "Error during refresh attempt {attempt}: {error_type} {error}",
    (
        "token",
        "refresh_failed",
    ): "All token refresh attempts failed (attempts={attempts}, retry_count={retry_count})",
    ("token", "refresh_timeout"): "Token refresh timed out on attempt {attempt}",
    (
        "token",
        "refresh_network_error",
    ): "Network error during token refresh attempt {attempt}: {error_type}",
    ("token", "refresh_failed_status"): "Token refresh failed (status={status})",
    ("token", "refresh_exception"): "Token refresh exception: {error_type}",
    (
        "token",
        "validation_invalid",
    ): "Token validation failed: invalid (status={status})",
    (
        "token",
        "validation_rate_limited",
    ): "Token validation rate limited (status={status})",
    ("token", "validation_failed_status"): "Token validation failed (status={status})",
    ("token", "validation_timeout"): "Token validation timeout",
    (
        "token",
        "validation_network_error",
    ): "Network error during token validation: {error_type}",
    (
        "token",
        "validation_error",
    ): "Unexpected error during token validation: {error_type}",
    (
        "token",
        "validation_exception",
    ): "Exception during token validation: {error_type}",
    (
        "token",
        "refresh_invalid_response",
    ): "Invalid token refresh response missing {missing_field}",
    (
        "token",
        "refresh_invalid_token",
    ): "Token refresh failed: invalid token (status={status}, {error_type})",
    (
        "token",
        "refresh_unauthorized",
    ): "Token refresh unauthorized (status={status}, {error_type})",
    ("token", "refresh_rate_limited"): "Token refresh rate limited (status={status})",
    (
        "token",
        "refresh_http_error",
    ): "HTTP error during token refresh (status={status}, {error_type})",
    ("token", "refresh_error"): "Unexpected token refresh error: {error_type}",
    (
        "token",
        "schedule_debug",
    ): "Scheduling debug: {seconds_remaining:.0f}s until expiry threshold",
    ("token", "validation_missing_access_token"): "Missing access token",
    (
        "token",
        "validation_missing_client_credentials",
    ): "Missing client credentials (id={has_client_id}, secret={has_client_secret})",
    ("token", "validation_refreshed"): "Token validated (refreshed)",
    ("token", "validation_valid"): "Token valid (remaining={human_remaining})",
    ("token", "validation_failed"): "Token validation failed",
    (
        "token",
        "new_token_validation_missing_field",
    ): "New token validation missing field {field}",
    ("token", "new_validation_success"): "New token validation success",
    ("token", "new_validation_failed"): "New token validation failed",
    (
        "token",
        "new_validation_exception",
    ): "Exception during new token validation: {error_type}",
    # IRC events (subset)
    ("irc", "state_change"): "IRC state change {old_state} -> {new_state}",
    ("irc", "connect_start"): "Connecting to IRC server {server}:{port}",
    ("irc", "open_connection"): "Opening IRC connection (timeout={timeout})",
    ("irc", "connection_established"): "IRC TCP connection established",
    ("irc", "auth_sent"): "Authentication sent, waiting {wait_seconds}s",
    ("irc", "connect_success"): "Connected and joined channel {channel}",
    ("irc", "connect_join_failed"): "Connection succeeded but channel join failed",
    ("irc", "connect_timeout"): "IRC connection timed out (timeout={timeout})",
    ("irc", "connect_reset"): "Connection reset by peer: {error}",
    ("irc", "connect_network_error"): "Network error during connect: {error}",
    ("irc", "join_start"): "Joining channel {channel}",
    ("irc", "join_success"): "Joined channel {channel}",
    ("irc", "join_error"): "Error joining channel {channel}: {error_type}",
    ("irc", "join_timeout"): "Channel join timeout for {channel}",
    ("irc", "listener_start"): "Listener loop started",
    ("irc", "listener_stopped"): "Listener loop stopped",
    ("irc", "no_reader"): "No reader stream available",
    ("irc", "connection_lost"): "Connection lost",
    ("irc", "connection_stale"): "Connection stale - terminating",
    ("irc", "raw"): "Raw IRC message received",
    ("irc", "privmsg"): "Chat message received (self={self_message})",
    ("irc", "no_message_handler"): "No message handler configured",
    ("irc", "dispatch_message_handler"): "Dispatching message handler",
    ("irc", "message_handler_complete"): "Message handler completed",
    ("irc", "no_server_activity"): "No server activity for {timeout}s",
    ("irc", "ping_timeout"): "Ping timeout after {time_since_ping:.1f}s",
    (
        "irc",
        "stale_early_warning",
    ): "Early stale warning: {time_since_activity:.1f}s inactivity",
    ("irc", "token_updated"): "IRC token updated",
    ("irc", "disconnected"): "Disconnected from IRC",
    ("irc", "reconnect_missing_details"): "Cannot reconnect: missing credentials",
    ("irc", "force_reconnect"): "Force reconnect initiated",
    (
        "irc",
        "reconnect_backoff_wait",
    ): "Waiting {remaining_wait:.1f}s before reconnect (attempt={attempt})",
    ("irc", "reconnect_timeout"): "Reconnect attempt timed out (timeout={timeout})",
    (
        "irc",
        "reconnect_success",
    ): "Reconnect successful ({extra_channels} extra channels)",
    ("irc", "reconnect_failed"): "Reconnect failed (attempt={attempt})",
    ("irc", "connection_retry_timeout"): "Connection retry timeout elapsed",
    ("irc", "connection_reset"): "IRC connection reset: {error}",
    ("irc", "join_already_confirmed"): "Join skipped; already confirmed {channel}",
    ("irc", "join_attempt"): "Join attempt {attempt} for {channel}",
    ("irc", "join_begin"): "Beginning join process for {channel}",
    ("irc", "join_connection_lost"): "Connection lost during join",
    ("irc", "join_max_attempts"): "Max join attempts reached for {channel}",
    ("irc", "join_no_reader"): "No reader while joining channel",
    (
        "irc",
        "join_processing_error",
    ): "Error processing join for {channel}: {error_type}",
    ("irc", "listen_start_failed"): "Cannot start listener (not connected)",
    ("irc", "privmsg_invalid_format"): "Invalid PRIVMSG format",
    ("irc", "privmsg_parse_failed"): "Failed to parse PRIVMSG parameters",
    # Startup guidance
    ("startup", "instructions_header"): "Startup instructions emitted",
    ("startup", "instructions_setup_step"): "Setup step {step}: {text}",
    ("startup", "instructions_auto_section"): "Automatic configuration section",
    ("startup", "instructions_manual_section"): "Manual configuration section",
    ("startup", "instructions_how_it_works"): "Explaining how the bot works",
    ("startup", "instructions_point"): "Instruction: {text}",
    ("startup", "instructions_security_notice"): "Security notice about client secrets",
    # Config events
    ("config", "load_error"): "Configuration load error: {error_type}",
    ("config", "save_atomic_success"): "Config saved atomically",
    ("config", "save_atomic_failed"): "Atomic config save failed: {error_type}",
    ("config", "save_failed"): "Config save failed: {error_type}",
    ("config", "update_user_failed"): "Failed to update user in config: {username}",
    ("config", "random_colors_disabled"): "Random colors disabled globally",
    (
        "config",
        "random_colors_user_not_found",
    ): "Random color disable failed; user not found {username}",
    (
        "config",
        "disable_random_colors_failed",
    ): "Failed to disable random colors for {username}",
    (
        "config",
        "save_operation_start",
    ): "Save operation start user_count={user_count} file={config_file}",
    (
        "config",
        "save_user_detail",
    ): "Saving user index={index} username={username} prime_or_turbo={is_prime_or_turbo}",
    ("config", "save_json_preview"): "Save JSON preview length={length}",
    ("config", "save_verification"): "Verification read user_count={user_count}",
    (
        "config",
        "save_verification_user",
    ): "Verified user index={index} username={username} prime_or_turbo={is_prime_or_turbo}",
    (
        "config",
        "added_missing_is_prime_or_turbo",
    ): "Added missing is_prime_or_turbo for {username} value={value}",
    ("config", "no_config_file"): "No configuration file found",
    (
        "config",
        "no_config_file_instruction",
    ): "Instruction emitted for creating config file",
    ("config", "summary"): "Configuration summary (users={user_count})",
    ("config", "summary_user"): "User summary {username}",
    (
        "config",
        "channel_normalization_change",
    ): "Channel normalization change {original}->{normalized}",
    ("config", "channel_normalization_saved"): "Channel normalization saved",
    (
        "config",
        "channel_normalization_save_failed",
    ): "Failed saving normalization: {error_type}",
    ("config", "token_setup_start"): "Token setup start for {username}",
    ("config", "token_setup_success"): "Token setup success for {username}",
    (
        "config",
        "token_setup_validation_failed",
    ): "Token setup validation failed for {username}",
    ("config", "token_setup_failed"): "Token setup failed for {username}",
    (
        "config",
        "token_setup_exception",
    ): "Token setup exception for {username}: {error_type}",
    ("config", "tokens_update_saved"): "Tokens update saved",
    ("config", "tokens_update_save_failed"): "Tokens update save failed: {error_type}",
    ("config", "no_valid_users"): "No valid user configurations found",
    (
        "config",
        "valid_users_found",
    ): "Valid user configurations found count={user_count}",
    # Manager (bot manager) events
    ("manager", "start_all"): "Starting all bots (count={count})",
    ("manager", "http_session_create"): "Creating shared HTTP session",
    ("manager", "bot_create_failed"): "Failed to create bot: {error}",
    ("manager", "no_bots"): "No bots created - aborting start",
    ("manager", "launch_tasks"): "Launching bot tasks (count={tasks})",
    ("manager", "all_started"): "All bots started successfully",
    ("manager", "bot_created"): "Bot created: {user}",
    ("manager", "stopping_all"): "Stopping all bots",
    ("manager", "all_stopped"): "All bots stopped",
    ("manager", "task_cancelled"): "Cancelled task index={index}",
    ("manager", "task_cancel_error"): "Error cancelling task index={index}: {error}",
    ("manager", "bot_closed"): "Closed bot index={index} user={user}",
    ("manager", "bot_close_error"): "Error closing bot index={index}: {error}",
    (
        "manager",
        "task_exception",
    ): "Task index={index} finished with exception: {error}",
    ("manager", "wait_tasks_error"): "Error waiting for task completion: {error}",
    (
        "manager",
        "config_change_detected",
    ): "Config change detected - scheduling restart",
    ("manager", "restarting"): "Restarting with new configuration",
    (
        "manager",
        "config_updated",
    ): "Configuration updated old={old_users} new={new_users}",
    ("manager", "health_tick"): "Health check tick",
    ("manager", "health_cancelled"): "Health monitoring cancelled",
    ("manager", "health_error"): "Health monitor error: {error}",
    ("manager", "health_check_running"): "Health check already running - skip",
    ("manager", "all_healthy"): "All bots healthy",
    ("manager", "task_watchdog_tick"): "Task watchdog tick",
    ("manager", "task_watchdog_cancelled"): "Task watchdog cancelled",
    ("manager", "task_watchdog_error"): "Task watchdog error: {error}",
    ("manager", "task_completed"): "Task completed index={index}",
    ("manager", "task_exception_detected"): "Task exception index={index}: {error}",
    ("manager", "removed_dead_tasks"): "Removed dead tasks (count={count})",
    ("manager", "all_tasks_alive"): "All tasks alive",
    ("manager", "bot_unhealthy"): "Bot unhealthy user={user}",
    (
        "manager",
        "bot_health_stats",
    ): "Bot health stats user={user} since={time_since_activity} connected={connected} running={running}",
    (
        "manager",
        "connection_stats_error",
    ): "Error getting connection stats for user={user}: {error}",
    ("manager", "irc_none"): "IRC connection is None user={user}",
    (
        "manager",
        "reconnecting_unhealthy",
    ): "Reconnecting unhealthy bots (count={count})",
    ("manager", "reconnected_bot"): "Reconnected bot user={user}",
    ("manager", "reconnect_failed"): "Failed to reconnect bot user={user}",
    ("manager", "no_irc_for_reconnect"): "No IRC connection to reconnect user={user}",
    ("manager", "reconnect_error"): "Reconnection error user={user}: {error}",
    (
        "manager",
        "bot_healthy_before_reconnect",
    ): "Bot became healthy before reconnect user={user}",
    ("manager", "precheck_health_error"): "Pre-check health error user={user}: {error}",
    (
        "manager",
        "old_listener_cancel_error",
    ): "Error cancelling old listener user={user}: {error}",
    (
        "manager",
        "no_irc_for_force_reconnect",
    ): "No IRC instance present for reconnect user={user}",
    ("manager", "irc_reconnect_failed"): "IRC reconnection failed user={user}",
    (
        "manager",
        "old_listener_cancel_noncritical",
    ): "Old listener cancellation raised non-critical exception user={user}",
    (
        "manager",
        "failed_rejoin_channel",
    ): "Failed rejoin channel user={user} channel={channel}: {error}",
    (
        "manager",
        "cannot_start_listener",
    ): "Cannot start listener without IRC instance user={user}",
    ("manager", "listener_start_failed"): "Listener start failed user={user}: {error}",
    (
        "manager",
        "health_not_confirmed",
    ): "Health not confirmed after reconnect user={user}",
    ("manager", "started_health_monitor"): "Started health monitor",
    ("manager", "started_task_watchdog"): "Started task watchdog",
    ("manager", "saved_statistics"): "Saved statistics (bots={bots})",
    ("manager", "restored_statistics"): "Restored statistics (bots={bots})",
    (
        "manager",
        "aggregate_statistics",
    ): "Aggregate statistics bots={bots} messages={total_messages} colors={total_color_changes}",
    (
        "manager",
        "signal_shutdown",
    ): "Signal received - initiating shutdown (signal={signal})",
    ("manager", "config_watcher_enabled"): "Config watcher enabled file={file}",
    (
        "manager",
        "config_watching_unavailable",
    ): "Config watching unavailable - install watchdog",
    ("manager", "config_watcher_start_failed"): "Config watcher start failed: {error}",
    ("manager", "shutdown_initiated"): "Shutdown initiated - stopping bots",
    (
        "manager",
        "restart_failed_keep_previous",
    ): "Restart failed - keeping previous config",
    (
        "manager",
        "all_tasks_completed_unexpectedly",
    ): "All bot tasks completed unexpectedly",
    ("manager", "possible_auth_issue"): "Likely authentication or connection issue",
    ("manager", "bots_running"): "Bots running - press Ctrl+C to stop",
    ("manager", "keyboard_interrupt"): "Keyboard interrupt",
    ("manager", "fatal_error"): "Fatal error: {error}",
    ("manager", "goodbye"): "Goodbye",
    # Scheduler events
    ("scheduler", "started"): "Adaptive scheduler started",
    ("scheduler", "stopped"): "Adaptive scheduler stopped",
    (
        "scheduler",
        "scheduled_recurring",
    ): "Scheduled recurring task name={task} interval={interval}s",
    (
        "scheduler",
        "scheduled_once",
    ): "Scheduled one-time task name={task} delay={delay}s",
    ("scheduler", "cancelled_tasks_named"): "Cancelled tasks named {task}",
    (
        "scheduler",
        "rescheduled_task",
    ): "Rescheduled task name={task} interval={interval}s",
    ("scheduler", "scheduler_cancelled"): "Scheduler cancelled",
    ("scheduler", "scheduler_error"): "Scheduler error: {error}",
    ("scheduler", "task_cancelled"): "Task {task} cancelled",
    ("scheduler", "task_failed"): "Task {task} failed: {error}",
    # Application / main
    ("app", "start"): "Starting Twitch Color Changer Bot",
    ("app", "interrupted"): "Interrupted by user",
    ("app", "critical_error"): "Critical error occurred: {error}",
    ("app", "shutdown_complete"): "Application shutdown complete",
    ("app", "health_mode"): "Health check mode",
    ("app", "health_pass"): "Health check passed users={user_count}",
    ("app", "health_fail"): "Health check failed: {error}",
    ("app", "terminated_by_user"): "Application terminated by user",
    ("app", "top_level_error"): "Top-level critical error: {error}",
    # Retry / generic error handling events
    (
        "retry",
        "attempt",
    ): "Retry attempt {attempt}/{max_retries} in {wait_time}s user={user}: {error}",
    ("error", "logged"): "Error: {message} user={user} details={error}",
    # Token additional (legacy direct warn converted)
    (
        "token",
        "refresh_retry_scheduled",
    ): "Token refresh retry scheduled attempt={attempt} delay={delay}s",
    # Validation events
    ("validation", "username_invalid"): "Username invalid: '{username}'",
    ("validation", "placeholder_token"): "Placeholder token used for {username}",
    (
        "validation",
        "missing_auth",
    ): "Missing authentication for {username} (token or client credentials required)",
    ("validation", "channels_missing"): "Channels list missing for {username}",
    ("validation", "channel_invalid"): "Invalid channel '{channel}' for {username}",
    ("validation", "user_config_not_dict"): "User config must be dict got={type}",
    ("validation", "users_not_list"): "Users config must be a list",
    ("validation", "no_users"): "No users configured",
    ("validation", "duplicate_username"): "Duplicate username '{username}' skipped",
    ("validation", "user_invalid_skipped"): "Skipping invalid config for {username}",
    # Config watcher events
    ("config_watch", "file_changed"): "Config file changed path={path}",
    ("config_watch", "dir_missing"): "Config directory missing path={path}",
    ("config_watch", "start"): "Started watching config file path={path}",
    ("config_watch", "start_failed"): "Failed to start config watcher: {error}",
    ("config_watch", "stopped"): "Stopped config file watcher",
    (
        "config_watch",
        "empty_or_invalid",
    ): "Config file empty or invalid - ignoring changes",
    (
        "config_watch",
        "no_valid_users",
    ): "New config has no valid users - ignoring changes",
    (
        "config_watch",
        "validation_passed",
    ): "Config validation passed users={user_count}",
    ("config_watch", "processing_error"): "Error processing config change: {error}",
    ("config_watch", "paused"): "Config watcher paused (bot update)",
    ("config_watch", "resumed"): "Config watcher resumed",
    ("config_watch", "change_ignored"): "Config change ignored (bot initiated)",
    # Token manager events
    ("token_manager", "start"): "Started centralized token manager",
    ("token_manager", "stop"): "Stopped token manager",
    (
        "token_manager",
        "not_registered",
    ): "User not registered with token manager username={username}",
    ("token_manager", "loop_cancelled"): "Token refresh loop cancelled",
    ("token_manager", "loop_error"): "Error in token refresh loop: {error}",
    (
        "token_manager",
        "token_validated",
    ): "Token validated expires_in={expires_in}s username={username}",
    (
        "token_manager",
        "refresh_start",
    ): "Refreshing token attempt={attempt} username={username}",
    (
        "token_manager",
        "user_registered",
    ): "Registered user state={state} username={username}",
    (
        "token_manager",
        "refresh_in_cooldown",
    ): "Token refresh in cooldown username={username}",
    (
        "token_manager",
        "refresh_success",
    ): "Token refreshed successfully username={username}",
    (
        "token_manager",
        "refresh_failed",
    ): "Token refresh failed username={username}: {error}",
    (
        "token_manager",
        "refresh_cooldown",
    ): "Refresh cooldown username={username} seconds={cooldown}",
    # Bot events (initial subset; more can be added if needed)
    ("bot", "start"): "Starting bot user={user}",
    ("bot", "using_async_irc"): "Using async IRC client user={user}",
    ("bot", "shutdown_initiated"): "Shutting down bot user={user}",
    ("bot", "stopping"): "Stopping bot user={user}",
    ("bot", "disconnect_error"): "Error disconnecting IRC user={user}: {error}",
    (
        "bot",
        "waiting_irc_task_error",
    ): "Error waiting for IRC task user={user}: {error}",
    ("bot", "token_expired_refreshing"): "Token expired attempting refresh user={user}",
    ("bot", "current_color"): "Current color is {color} user={user}",
    ("bot", "no_current_color"): "No current color set user={user}",
    ("bot", "get_color_error"): "Error getting current color user={user}: {error}",
    ("bot", "rate_limited_retry"): "Rate limited will retry user={user}",
    ("bot", "error_changing_color"): "Error changing color user={user}: {error}",
    ("bot", "closing"): "Closing bot user={user}",
    ("bot", "registering_token_manager"): "Registering with token manager user={user}",
    ("bot", "user_id_retrieved"): "Retrieved user_id {user_id} user={user}",
    ("bot", "user_id_failed"): "Failed to retrieve user_id user={user}",
    ("bot", "initialized_color"): "Initialized with current color {color} user={user}",
    (
        "bot",
        "normalized_channels",
    ): "Normalized channels old={old_count} new={new_count} user={user}",
    ("bot", "listener_start"): "Starting async message listener user={user}",
    ("bot", "scheduler_not_running"): "Scheduler not running restarting user={user}",
    ("bot", "scheduler_task_stopped"): "Scheduler task stopped restarting user={user}",
    (
        "bot",
        "scheduler_stalled",
    ): "Scheduler stalled next_task_in={next_delay}s user={user}",
    (
        "bot",
        "scheduler_check_error",
    ): "Error checking scheduler health user={user}: {error}",
    (
        "bot",
        "connection_recovered",
    ): "Connection recovered after {duration:.1f}s user={user}",
    ("bot", "connection_failure_detected"): "Connection failure detected user={user}",
    (
        "bot",
        "partial_connectivity",
    ): "Partial connectivity detected duration={duration:.1f}s user={user}",
    (
        "bot",
        "network_partition",
    ): "Network partition detected duration={duration:.1f}s user={user}",
    (
        "bot",
        "irc_unhealthy",
    ): "IRC unhealthy reasons={reasons} state={state} user={user}",
    ("bot", "irc_health_check_error"): "Error checking IRC health user={user}: {error}",
    ("bot", "token_expired"): "Token expired user={user}",
    ("bot", "token_expires_in"): "Token expires in {time_str} user={user}",
    (
        "bot",
        "user_info_failed_status",
    ): "Failed to get user info status={status_code} user={user}",
    ("bot", "user_info_token_expired"): "Token expired attempting refresh user={user}",
    ("bot", "user_info_error"): "Error getting user info user={user}: {error}",
    ("bot", "current_color_is"): "Current color is {color} user={user}",
    ("bot", "no_current_color_set"): "No current color set user={user}",
    (
        "bot",
        "get_current_color_error",
    ): "Error getting current color user={user}: {error}",
    (
        "bot",
        "no_config_file_for_persist",
    ): "No config file specified cannot persist tokens user={user}",
    ("bot", "empty_access_token"): "Cannot save empty access token user={user}",
    ("bot", "empty_refresh_token"): "Cannot save empty refresh token user={user}",
    ("bot", "token_saved"): "Token changes saved user={user}",
    ("bot", "config_file_not_found"): "Config file not found path={path} user={user}",
    ("bot", "config_permission_denied"): "Permission denied writing config user={user}",
    (
        "bot",
        "save_retry",
    ): "Failed to save tokens attempt={attempt} error={error} user={user}",
    (
        "bot",
        "save_failed_final",
    ): "Failed to save token changes after attempts={attempts} error={error} user={user}",
    ("bot", "normalized_channels_saved"): "Normalized channels saved user={user}",
    (
        "bot",
        "normalized_channels_save_failed",
    ): "Failed to save normalized channels user={user}: {error}",
    ("bot", "color_change_timeout"): "Color change timeout user={user}",
    (
        "bot",
        "color_change_attempt_refresh",
    ): "Attempting token refresh after 401 color change user={user}",
    (
        "bot",
        "color_retry_after_refresh",
    ): "Retrying color change after token refresh user={user}",
    (
        "bot",
        "color_refresh_failed",
    ): "Token refresh failed cannot retry color change user={user}",
    (
        "bot",
        "color_change_status_failed",
    ): "Failed to change color status={status_code} user={user}",
    ("bot", "rate_limited_color_change"): "Rate limited retry soon user={user}",
    (
        "bot",
        "token_refresh_for_color",
    ): "401 unauthorized trigger token refresh user={user}",
    (
        "bot",
        "turbo_required_disabling_random",
    ): "Turbo/Prime required disabling random colors user={user}",
    (
        "bot",
        "random_colors_disabled_persisted",
    ): "Disabled random colors persisted user={user}",
    (
        "bot",
        "random_colors_persist_failed",
    ): "Failed to persist random color setting user={user}",
    (
        "bot",
        "error_changing_color_internal",
    ): "Error changing color user={user}: {error}",
    ("bot", "preset_color_changed"): "Color changed to {color} preset user={user}",
    (
        "bot",
        "preset_color_401",
    ): "401 during preset color change refreshing token user={user}",
    (
        "bot",
        "preset_color_retry",
    ): "Retrying preset color change after refresh user={user}",
    (
        "bot",
        "preset_color_retry_failed_status",
    ): "Failed preset color after refresh status={status_code} user={user}",
    (
        "bot",
        "preset_color_retry_error",
    ): "Error preset color retry user={user}: {error}",
    (
        "bot",
        "preset_color_refresh_failed",
    ): "Token refresh failed during preset color fallback user={user}",
    (
        "bot",
        "preset_color_failed_status",
    ): "Failed preset color status={status_code} user={user}",
    ("bot", "preset_color_error"): "Error preset color fallback user={user}: {error}",
    ("bot", "color_changed"): "Color changed to {color} user={user}",
    ("bot", "closing_for_user"): "Closing bot user={user}",
    ("bot", "statistics"): "Statistics user={user} messages={messages} colors={colors}",
    ("bot", "connect_failed"): "Failed to connect to IRC user={user}",
    (
        "bot",
        "irc_health_ok",
    ): "IRC health OK state={state} activity={activity_time:.1f}s user={user}",
    (
        "bot",
        "irc_reconnect_auto",
    ): "IRC will handle reconnection automatically user={user}",
    (
        "bot",
        "irc_auth_failure_error",
    ): "Error handling IRC auth failure user={user}: {error}",
    (
        "bot",
        "irc_auth_refresh_success",
    ): "Token refreshed after IRC auth failure user={user}",
}
